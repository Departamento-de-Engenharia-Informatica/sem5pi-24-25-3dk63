name: Backend CI/CD

on:
  schedule:
    - cron: "0 6 * * *" # Daily at 6 AM UTC
  workflow_dispatch:

defaults:
  run:
    working-directory: Backend/

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0"

      - name: Restore dependencies
        run: dotnet restore DDDNetCore.csproj

      - name: Build application
        run: dotnet publish DDDNetCore.csproj -c Release -o ./dist --self-contained -r linux-x64

      - name: Run tests
        run: dotnet test DDDNetCore.csproj

      - name: Archive production artifacts
        run: tar -czf dist.tar.gz -C ./dist .

      - name: Deploy artifacts and start application
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "Deployment started: $(date)"
            DEPLOY_DIR=~/deploy-Backend
            APP_NAME=DDDNetCore

            # Ensure deployment directory exists
            mkdir -p $DEPLOY_DIR

            # Upload artifacts
            echo "Uploading artifacts..."
            cat > $DEPLOY_DIR/dist.tar.gz << 'EOF'
            $(base64 -w 0 dist.tar.gz)
            EOF
            base64 -d $DEPLOY_DIR/dist.tar.gz > $DEPLOY_DIR/dist.tar.gz
            tar -xzf $DEPLOY_DIR/dist.tar.gz -C $DEPLOY_DIR
            rm $DEPLOY_DIR/dist.tar.gz

            # Setup environment
            export ASPNETCORE_ENVIRONMENT="Production"
            export ASPNETCORE_URLS="https://localhost:5001"

            # Database migration
            echo "Checking for pending migrations..."
            if dotnet ef migrations list | grep -q 'Pending'; then
              echo "Running migrations..."
              dotnet ef database update
            else
              echo "No pending migrations."
            fi

            # Stop existing app
            echo "Stopping existing instance..."
            pkill -f $APP_NAME || echo "No running instance found."

            # Start application
            echo "Starting new instance..."
            nohup ./dist/$APP_NAME > app.log 2>&1 &

            # Verify deployment
            sleep 5
            if pgrep -f $APP_NAME > /dev/null; then
              echo "Deployment successful: $(date)"
            else
              echo "Deployment failed: $(date)"
              exit 1
            fi
